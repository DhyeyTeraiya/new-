# Docker Compose for Browser AI Agent Training System
version: '3.8'

services:
  # Training Service
  ai-trainer:
    build:
      context: .
      dockerfile: Dockerfile.training
    volumes:
      - ./training_data:/app/training_data
      - ./models:/app/models
      - ./logs:/app/logs
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - WANDB_API_KEY=${WANDB_API_KEY}
      - PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
    command: python scripts/train_model.py full --data-dir /app/training_data --output-dir /app/models
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - ai-network

  # Model Server Service
  model-server:
    build:
      context: .
      dockerfile: Dockerfile.server
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models:ro
    environment:
      - MODEL_PATH=/app/models/best_model.pt
      - CONFIG_PATH=/app/models/config.json
      - CUDA_VISIBLE_DEVICES=0
    depends_on:
      - ai-trainer
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - ai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Data Collection Service
  data-collector:
    build:
      context: .
      dockerfile: Dockerfile.collector
    volumes:
      - ./training_data:/app/training_data
    environment:
      - HEADLESS=true
      - MAX_SITES=100
      - MAX_PAGES_PER_SITE=10
    command: python scripts/train_model.py collect --data-dir /app/training_data --max-sites 100
    networks:
      - ai-network

  # Redis for Caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-network

  # PostgreSQL for Metadata
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=browser_ai_agent
      - POSTGRES_USER=ai_user
      - POSTGRES_PASSWORD=ai_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - ai-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - ai-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - ai-network

  # Jupyter Notebook for Analysis
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/app/notebooks
      - ./training_data:/app/training_data:ro
      - ./models:/app/models:ro
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=browser-ai-agent
    command: jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root
    networks:
      - ai-network

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  ai-network:
    driver: bridge