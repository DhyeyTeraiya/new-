version: '3.8'

services:
  # MongoDB Database (Superior to PostgreSQL for AI workloads)
  mongodb:
    image: mongo:7.0
    container_name: browser-ai-agent-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: enterprise123
      MONGO_INITDB_DATABASE: browser_ai_agent
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    command: mongod --replSet rs0 --bind_ip_all
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cluster Master (Superior performance)
  redis-master:
    image: redis:7-alpine
    container_name: browser-ai-agent-redis-master
    ports:
      - "6379:6379"
    volumes:
      - redis_master_data:/data
      - ./config/redis-master.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cluster Slave
  redis-slave:
    image: redis:7-alpine
    container_name: browser-ai-agent-redis-slave
    ports:
      - "6380:6379"
    volumes:
      - redis_slave_data:/data
      - ./config/redis-slave.conf:/usr/local/etc/redis/redis.conf
    depends_on:
      redis-master:
        condition: service_healthy
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for file storage (S3 compatible)
  minio:
    image: minio/minio:latest
    container_name: ai-website-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Enterprise API with Fastify (Superior to Express)
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile.dev
      target: development
    container_name: browser-ai-agent-api
    environment:
      NODE_ENV: development
      PORT: 4000
      MONGODB_URI: mongodb://admin:enterprise123@mongodb:27017/browser_ai_agent?authSource=admin
      REDIS_MASTER_URL: redis://redis-master:6379
      REDIS_SLAVE_URL: redis://redis-slave:6379
      JWT_SECRET: enterprise-jwt-secret-superior-to-manus
      JWT_REFRESH_SECRET: enterprise-refresh-secret-superior-to-manus
      CORS_ORIGIN: http://localhost:3000
      NVIDIA_API_KEY: ${NVIDIA_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      RATE_LIMIT_MAX: 1000
      RATE_LIMIT_WINDOW: 900000
    ports:
      - "4000:4000"
    volumes:
      - ./apps/api:/app
      - /app/node_modules
    depends_on:
      mongodb:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      redis-slave:
        condition: service_healthy
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Multi-Agent System (Superior to Manus 3-Agent Architecture)
  agents:
    build:
      context: .
      dockerfile: apps/agents/Dockerfile.dev
      target: development
    container_name: browser-ai-agent-agents
    environment:
      NODE_ENV: development
      PORT: 4001
      MONGODB_URI: mongodb://admin:enterprise123@mongodb:27017/browser_ai_agent?authSource=admin
      REDIS_MASTER_URL: redis://redis-master:6379
      NVIDIA_API_KEY: ${NVIDIA_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      PLAYWRIGHT_BROWSERS_PATH: /ms-playwright
      AGENT_PLANNER_ENABLED: true
      AGENT_NAVIGATOR_ENABLED: true
      AGENT_EXTRACTOR_ENABLED: true
      AGENT_VERIFIER_ENABLED: true
      AGENT_COORDINATOR_ENABLED: true
    ports:
      - "4001:4001"
    volumes:
      - ./apps/agents:/app
      - /app/node_modules
    depends_on:
      mongodb:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      api:
        condition: service_healthy
    command: npm run dev
    cap_add:
      - SYS_ADMIN
    security_opt:
      - seccomp:unconfined
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Premium Website with Next.js 14 (Superior to Manus UI)
  website:
    build:
      context: .
      dockerfile: apps/website/Dockerfile.dev
      target: development
    container_name: browser-ai-agent-website
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:4000
      NEXT_PUBLIC_WS_URL: ws://localhost:4000
      NEXT_PUBLIC_AGENTS_URL: http://localhost:4001
      NEXT_PUBLIC_APP_URL: http://localhost:3000
      NEXT_PUBLIC_ENABLE_PWA: true
      NEXT_PUBLIC_ENABLE_3D: true
      NEXT_PUBLIC_ENABLE_VOICE: true
    ports:
      - "3000:3000"
    volumes:
      - ./apps/website:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      api:
        condition: service_healthy
      agents:
        condition: service_healthy
    command: npm run dev

  # Enterprise Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: browser-ai-agent-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.dev.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - website
      - api
      - agents
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring (Enterprise-grade)
  prometheus:
    image: prom/prometheus:latest
    container_name: browser-ai-agent-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana Dashboard (Superior monitoring to Manus)
  grafana:
    image: grafana/grafana:latest
    container_name: browser-ai-agent-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: enterprise123
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus

volumes:
  mongodb_data:
  redis_master_data:
  redis_slave_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: browser-ai-agent-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16